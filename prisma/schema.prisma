// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Student {
  id               String           @id @default(cuid())
  lrn              String?          @unique // Learner Reference Number
  firstName        String
  middleName       String?
  lastName         String
  fullName         String
  gender           Gender
  contactNumber    String
  dateOfBirth      DateTime

  // Philippine Address System
  houseNumber      String?          // House/Unit/Block Number
  street           String?          // Street name or Sitio
  subdivision      String?          // Subdivision/Village name
  barangay         String           // Barangay
  city             String           // City/Municipality
  province         String           // Province
  zipCode          String?          // Postal/ZIP code

  // Parent/Guardian Information
  parentGuardian   String           // Legacy field for backward compatibility

  // Father's Information
  fatherName       String?
  fatherOccupation String?
  fatherEmployer   String?
  fatherWorkContact String?
  fatherMonthlySalary Float?

  // Mother's Information
  motherName       String?
  motherOccupation String?
  motherEmployer   String?
  motherWorkContact String?
  motherMonthlySalary Float?

  // Guardian Relationship (if not parent)
  guardianRelationship String?

  // Emergency Contact
  emergencyContactName String?
  emergencyContactNumber String?
  emergencyContactRelationship String?

  // Academic Information
  gradeLevel       String
  sectionId        String?
  section          Section?         @relation(fields: [sectionId], references: [id])
  enrollmentStatus EnrollmentStatus @default(PENDING)
  isTransferee     Boolean          @default(false) // Is transferee from another school
  previousSchool   String?          // Previous school name if transferee
  remarks          String?

  // Enrollment History
  enrollments      Enrollment[]
  notifications    Notification[]

  // Payment Information
  payments         Payment[]
  paymentAdjustments PaymentAdjustment[]
  feeStatus        StudentFeeStatus[]
  refunds          Refund[]
  optionalFees     StudentOptionalFee[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([fullName, dateOfBirth])
  @@index([lrn])
  @@index([gradeLevel])
  @@index([enrollmentStatus])
  @@index([barangay])
  @@index([city])
  @@index([sectionId])
}

model AcademicYear {
  id               String           @id @default(cuid())
  name             String           @unique // e.g., "2024-2025"
  startDate        DateTime
  endDate          DateTime?
  isActive         Boolean          @default(false)

  enrollments      Enrollment[]
  feeTemplates     FeeTemplate[]
  payments         Payment[]
  paymentAdjustments PaymentAdjustment[]
  studentFeeStatuses StudentFeeStatus[]
  refunds          Refund[]
  optionalFees     OptionalFee[]
  studentOptionalFees StudentOptionalFee[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([isActive])
}

model Section {
  id               String           @id @default(cuid())
  name             String           // e.g., "Enthusiasm", "Obedience"
  gradeLevel       String           // e.g., "Kinder 1", "Grade 1"
  isActive         Boolean          @default(true)

  students         Student[]
  enrollments      Enrollment[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([name, gradeLevel])
  @@index([gradeLevel])
  @@index([isActive])
}

model Enrollment {
  id               String           @id @default(cuid())
  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  schoolYear       String           // e.g., "2024-2025" (denormalized for quick access)
  gradeLevel       String
  sectionId        String?
  section          Section?         @relation(fields: [sectionId], references: [id])
  enrollmentDate   DateTime         @default(now())
  status           EnrollmentStatus @default(ENROLLED)

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([studentId])
  @@index([academicYearId])
  @@index([schoolYear])
  @@index([sectionId])
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")

  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Notification {
  id          String           @id @default(cuid())
  adminId     String
  admin       Admin            @relation(fields: [adminId], references: [id], onDelete: Cascade)

  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)

  // Related entities
  studentId   String?
  student     Student?         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  enrollmentId String?

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([adminId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
}

enum Gender {
  Male
  Female
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  TRANSFERRED
  DROPPED
}

enum NotificationType {
  ENROLLMENT
  SYSTEM
  ALERT
}

// Fee Management Models

model FeeTemplate {
  id               String           @id @default(cuid())
  name             String           // e.g., "Grade 1 Tuition 2024-2025"
  gradeLevel       String           // e.g., "Grade 1", "Kinder 1"
  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  totalAmount      Float            // Total fee amount
  isActive         Boolean          @default(true)
  description      String?

  breakdowns       FeeBreakdown[]
  studentFeeStatuses StudentFeeStatus[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([gradeLevel, academicYearId])
  @@index([gradeLevel])
  @@index([academicYearId])
  @@index([isActive])
}

model FeeBreakdown {
  id               String           @id @default(cuid())
  feeTemplateId    String
  feeTemplate      FeeTemplate      @relation(fields: [feeTemplateId], references: [id], onDelete: Cascade)

  description      String           // e.g., "Tuition Fee", "Books", "Lab Fee"
  amount           Float
  category         FeeCategory      @default(MISC)
  order            Int              @default(0) // For display ordering
  isRefundable     Boolean          @default(true) // Whether payments for this fee can be refunded

  // Payment tracking
  paymentLineItems PaymentLineItem[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([feeTemplateId])
}

model Payment {
  id               String           @id @default(cuid())
  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  amountPaid       Float
  paymentDate      DateTime         @default(now())
  paymentMethod    PaymentMethod    @default(CASH)
  referenceNumber  String?          // For check/online payment reference
  remarks          String?

  // Refund tracking (deprecated - use Refund model)
  isRefunded       Boolean          @default(false)
  refundAmount     Float            @default(0)
  refundDate       DateTime?
  refundReason     String?
  refundedBy       String?          // Admin who processed refund

  // Relations
  lineItems        PaymentLineItem[]
  refunds          Refund[]

  createdBy        String?          // Admin who recorded payment

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([studentId])
  @@index([academicYearId])
  @@index([paymentDate])
  @@index([isRefunded])
}

model Refund {
  id               String           @id @default(cuid())
  paymentId        String
  payment          Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  amount           Float
  reason           String
  referenceNumber  String?          // Refund reference number
  remarks          String?

  refundedBy       String?          // Admin who processed refund
  refundDate       DateTime         @default(now())

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([paymentId])
  @@index([studentId])
  @@index([academicYearId])
  @@index([refundDate])
}

model PaymentLineItem {
  id               String           @id @default(cuid())
  paymentId        String
  payment          Payment          @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  feeBreakdownId   String
  feeBreakdown     FeeBreakdown     @relation(fields: [feeBreakdownId], references: [id])

  amount           Float            // Amount paid for this specific line item
  description      String           // Snapshot of fee description

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([paymentId])
  @@index([feeBreakdownId])
}

model PaymentAdjustment {
  id               String           @id @default(cuid())
  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  type             AdjustmentType   // DISCOUNT or ADDITIONAL
  amount           Float            // Positive number (direction determined by type)
  reason           String           // e.g., "Sibling Discount", "Late Payment Fee"
  description      String?

  createdBy        String?          // Admin who created adjustment

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([studentId])
  @@index([academicYearId])
  @@index([type])
}

model StudentFeeStatus {
  id               String           @id @default(cuid())
  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  feeTemplateId    String?
  feeTemplate      FeeTemplate?     @relation(fields: [feeTemplateId], references: [id])

  // Computed fields
  baseFee          Float            @default(0) // From fee template
  totalAdjustments Float            @default(0) // Sum of adjustments (discounts negative, additions positive)
  totalDue         Float            @default(0) // baseFee + totalAdjustments
  totalPaid        Float            @default(0) // Sum of payments
  balance          Float            @default(0) // totalDue - totalPaid

  // Payment status
  paymentStatus    PaymentStatus    @default(UNPAID)
  isLatePayment    Boolean          @default(false)
  lateSince        DateTime?

  lastPaymentDate  DateTime?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([studentId, academicYearId])
  @@index([studentId])
  @@index([academicYearId])
  @@index([paymentStatus])
  @@index([isLatePayment])
}

enum FeeCategory {
  TUITION
  BOOKS
  UNIFORM
  LABORATORY
  LIBRARY
  ID_CARD
  EXAM
  REGISTRATION
  MISC
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  ONLINE
  GCASH
  PAYMAYA
}

enum AdjustmentType {
  DISCOUNT
  ADDITIONAL
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  OVERPAID
}

model CustomRemark {
  id          String   @id @default(cuid())
  label       String   // The remark text (e.g., "Pending SF9")
  category    String   // Category: documents, payment, behavioral, administrative, special, or custom
  isActive    Boolean  @default(true) // Can be deactivated without deleting
  sortOrder   Int      @default(0) // For custom ordering

  createdBy   String?  // Admin who created it
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

// Optional Fees Model - For fees not included in base template
model OptionalFee {
  id               String           @id @default(cuid())
  name             String           // e.g., "School ID", "PE Uniform"
  description      String?          // Additional description
  amount           Float?           // Fixed amount, null if variable (e.g., by gender)
  category         OptionalFeeCategory @default(OTHER)

  // For items with variations (e.g., uniforms by gender)
  hasVariations    Boolean          @default(false)
  variations       OptionalFeeVariation[]

  // Availability settings
  isActive         Boolean          @default(true)
  applicableGradeLevels String[]    // Empty array means all grades, otherwise specific grades
  academicYearId   String?
  academicYear     AcademicYear?    @relation(fields: [academicYearId], references: [id])

  // Student selections
  studentOptionalFees StudentOptionalFee[]

  sortOrder        Int              @default(0)
  createdBy        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([isActive])
  @@index([academicYearId])
  @@index([category])
}

model OptionalFeeVariation {
  id               String           @id @default(cuid())
  optionalFeeId    String
  optionalFee      OptionalFee      @relation(fields: [optionalFeeId], references: [id], onDelete: Cascade)

  name             String           // e.g., "Girl - Short Sleeve", "Boy - Long Sleeve"
  amount           Float

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([optionalFeeId])
}

// Junction table for students selecting optional fees
model StudentOptionalFee {
  id               String           @id @default(cuid())
  studentId        String
  student          Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)

  academicYearId   String
  academicYear     AcademicYear     @relation(fields: [academicYearId], references: [id])

  optionalFeeId    String
  optionalFee      OptionalFee      @relation(fields: [optionalFeeId], references: [id])

  // For fees with variations, store selected variation
  selectedVariationId String?

  // Actual amount at time of selection
  amount           Float

  // Payment tracking
  isPaid           Boolean          @default(false)
  paidAmount       Float            @default(0)

  createdBy        String?          // Admin who added it
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([studentId, academicYearId, optionalFeeId])
  @@index([studentId])
  @@index([academicYearId])
  @@index([optionalFeeId])
  @@index([isPaid])
}

enum OptionalFeeCategory {
  ID_CARD
  UNIFORM
  BOOKS
  MISCELLANEOUS
  GRADUATION
  CERTIFICATION
  OTHER
}

model RecycleBin {
  id                  String   @id @default(cuid())
  entityType          String   // Type of entity: student, section, academicYear, feeTemplate, customRemark, etc.
  entityId            String   // Original ID of the deleted entity
  entityData          Json     // Complete snapshot of the deleted entity
  entityName          String   // Display name for the entity (e.g., student name, section name)

  deletedBy           String?  // Admin who deleted it
  deletedAt           DateTime @default(now())
  permanentDeleteAt   DateTime // When it will be permanently deleted (30 days from deletedAt)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([entityType])
  @@index([deletedAt])
  @@index([permanentDeleteAt])
}

